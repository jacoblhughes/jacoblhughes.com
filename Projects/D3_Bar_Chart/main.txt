window.onload = function() {

let json = {};

req = new XMLHttpRequest();
req.open("GET", 'https://raw.githubusercontent.com/freeCodeCamp/ProjectReferenceData/master/GDP-data.json', true);
req.send();
req.onload = function () {
    json = JSON.parse(req.responseText);
    const dataset = json.data;
    let addition = [];
    dataset.forEach(function(element, index){
        element[0] = element[0].split('-').join('');
    });

    console.log(dataset)

    const w = 800;
    const h = 200;
    const heightScale = 1;
    const barWidth = 3;
    const barSpace = 0;
    const barLocation = barSpace + barWidth;
    const padding = 10;

    const anchor = d3.select('#graph')
        .append('svg')
        .attr('width', w)
        .attr('height', h)

    console.log(d3.max(dataset, (d) => d[0]))

    const xScale = d3.scale.linear()
        .domain([0, d3.max(dataset, (d) => d[0])])
        .range([padding, w - padding]);

    const yScale = d3.scale.linear()
        .domain([0, d3.max(dataset, (d) => d[1])])
        .range([h - padding, padding]);

    // const xAxis = d3.axis.bottom(xScale);

    // const yAxis = d3.axis.left(yScale);

    anchor.selectAll('rect')
        .data(dataset)
        .enter()
        .append("rect")
        // .attr("x", (d, i) => i * barLocation)
        // .attr("y", (d, i) => h - d[1] / heightScale)
        .attr("x", (d) => xScale(d[0]))
        .attr("y", (d) => yScale(d[1]))
        .attr("width", barWidth)
        .attr("height", (d, i) => d[1])
        .attr('fill', function (d, i) {
            if (i % 2 == 0) {
                return 'navy'
            } else {
                return 'green'
            }
        })
        .attr('class', 'bar')
        .append('title')
        .text((d) => 'Date: ' + d[0] + ', GDP: ' + d[1])

    // anchor.append('g')
    //     .attr("transform", "translate("+(w + padding) + ", 0")
    //     .call(yAxis);
};

}